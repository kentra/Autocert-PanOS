#!/bin/bash

# Config
DOMENESHOP_ENV=$(PWD)/.secrets/certbot/.domeneshop.env
PANOS_ENV=$(PWD)/.secrets/pan-python/.panos.env

# Tools
PANXAPI=$(PWD)/.venv/bin/panxapi.py
CERTBOT=$(PWD)/.venv/bin/certbot
REQUIRED_CMDS=("openssl" "curl" "$CERTBOT" "$PANXAPI") # List of required commands
WORK_DIR="$(PWD)/.certbot"
CONFIG_DIR="$WORK_DIR/config"
LOG_DIR="$WORK_DIR/log"
CERT_DIR="$WORK_DIR/letsencrypt/live"



# Load DOMENESHOP_ENV if it exists
if [ -f $DOMENESHOP_ENV ]; then
  echo "Loading environment variables from $DOMENESHOP_ENV"
  set -a       # automatically export all variables
  source $DOMENESHOP_ENV  # load the file
  set +a       # stop exporting automatically
else
  echo "$DOMENESHOP_ENV file not found!"
fi

# Load PANOS_ENV if it exists
if [ -f $PANOS_ENV ]; then
  echo "Loading environment variables from $PANOS_ENV"
  set -a       # automatically export all variables
  source $PANOS_ENV  # load the file
  set +a       # stop exporting automatically
else
  echo "$PANOS_ENV file not found!"
fi


# Checking for requirements:
check_requirements() {
    local missing=0
    echo "Checking required commands..."
    for cmd in "${REQUIRED_CMDS[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            echo "Missing command: $cmd"
            missing=1
        else
            echo "Found: $cmd"
        fi
    done

    if [ "$missing" -ne 0 ]; then
        echo "Exiting due to missing requirements."
        exit 1
    fi

    echo "All requirements satisfied."
}

# Run this at the top
check_requirements

TEMP_PWD=$(openssl rand -hex 15)


GenCerts() {
    sudo $CERTBOT certonly \
        --authenticator dns-domeneshop \
        --dns-domeneshop-credentials $DOMENESHOP_ENV \
        --dns-domeneshop-propagation-seconds 120 \
        -d $FQDN \
        --agree-tos \
        --work_dir $WORK_DIR \
        --config_dir $CONFIG_DIR \
        --log_dir $LOG_DIR
        #--quiet
}

UploadCerts() {
    #Depending on your setup, certbot may not give you separate files for the certificate and chain.  This script expects separate files.
    sudo mkdir -p $CERT_DIR/$FQDN
    sudo openssl pkcs12 -export -out $CERT_DIR/letsencrypt_pkcs12.pfx -inkey $CERT_DIR/$FQDN/privkey.pem -in $CERT_DIR/$FQDN/cert.pem -certfile $CERT_DIR/$FQDN/cert.pem -passout pass:$TEMP_PWD
    if [ -e $CERT_DIR/letsencrypt_pkcs12.pfx ]; then
        echo "...Uploading certificate: $CERT_NAME"
        curl -k --form file=@$CERT_DIR/letsencrypt_pkcs12.pfx "https://$PAN_MGMT/api/?type=import&category=certificate&certificate-name=$CERT_NAME&format=pkcs12&passphrase=$TEMP_PWD&key=$API_KEY" && echo " "
        curl -k --form file=@$CERT_DIR/letsencrypt_pkcs12.pfx "https://$PAN_MGMT/api/?type=import&category=private-key&certificate-name=$CERT_NAME&format=pkcs12&passphrase=$TEMP_PWD&key=$API_KEY" && echo " "
        sudo rm $CERT_DIR/letsencrypt_pkcs12.pfx
        #If you use a separate SSL/TLS Service Profile for the GlobalProtect Portal and Gateway, uncomment the next line and update the 'TLS_PROFILE' variable with the name of your GlobalProtect Portal's SSL/TLS Service Profile, as it appears in your management GUI.
        echo "...Changing SSL-TLS profiles"
        panxapi.py -h $PAN_MGMT -K $API_KEY -S "<certificate>$CERT_NAME</certificate>" "/config/shared/ssl-tls-service-profile/entry[@name='$TLS_PROFILE']"
        #If you use a separate SSL/TLS Service Profile for the GlobalProtect Portal and Gateway, uncomment the next line and update the 'GP_GW_TLS_PROFILE' variable with the name of your GlobalProtect Gateway's SSL/TLS Service Profile, as it appears in your management GUI. If you use a single SSL/TLS Service Profile for BOTH the Portal and Gateway, you can comment the following line out, or set the value of 'GP_GW_TLS_PROFILE' to the value of 'TLS_PROFILE'
        # panxapi.py -h $PAN_MGMT -K $API_KEY -S "<certificate>$CERT_NAME</certificate>" "/config/shared/ssl-tls-service-profile/entry[@name='$GP_GW_TLS_PROFILE']"
        echo "...Initiating commit"
        panxapi.py -h $PAN_MGMT -K $API_KEY -C '' --sync
    else
        echo "Error! .pfx file not found!"
    fi
}

# Initial attempt to renew the certificate
GenCerts

# Checks if CERT_NAME is present in Palo Alto
PACERT=$(curl -k -G "https://$PAN_MGMT/api/" --data-urlencode "type=config" --data-urlencode "action=get" --data-urlencode "xpath=/config/shared/certificate/entry[@name='$CERT_NAME']" --data-urlencode "key=$API_KEY")

if [[ "$PACERT" == *'status="success" code="19"'* ]]; then
    # A certificate with CERT_NAME value is present, the code bellow will check if the expiry date matches with local certificate
    PAEXPIRYDATE=$(echo $PACERT | awk -F'<not-valid-after[^>]*>|</not-valid-after>' '{print $2}')
    echo "Palo Alto $CERT_NAME expiry date: $PAEXPIRYDATE"
    if [ -e $CERT_DIR/$FQDN/cert.pem ]; then
        # Extracts expiry date from local certificate and checks against PA
        FILEEXPIRYDATE=$(openssl x509 -enddate -noout -in $CERT_DIR/$FQDN/cert.pem | awk -F'=' '{print $2}')
        echo "File expiry date: $FILEEXPIRYDATE"
        if [[ -n "$PAEXPIRYDATE" && -n "$FILEEXPIRYDATE" ]]; then
            if [[ "$PAEXPIRYDATE" == "$FILEEXPIRYDATE" ]]; then
               echo "Local certificate matches with Palo Alto certificate, nothing to do."
            else
                # If the expiry date of both certificates don't match, it will try to upload the new certificate
                UploadCerts
            fi
        else
            echo "Error: one of the expiry values is empty, please check your settings!"
        fi
    else
        # If the local certificate for the FQDN doesn't exist, it will try to renew and load the new certificate
        echo "Certificate for $FQDN not found, generating new certificate."
        GenCerts
        UploadCerts
    fi
elif [[ "$PACERT" == *'status="success" code="7"'* ]]; then
    echo "Certificate with name $CERT_NAME is not present in Palo Alto"
    if [ -e $CERT_DIR/$FQDN/cert.pem ]; then
        # If the local certificate for the FQDN exists but isn't present on Palo Alto, it will try to load the certificate
        echo "Certificate exists locally, uploading to Palo Alto."
        UpdateCerts
    else
        # If the certificate for FQDN doesn't exist both locally and in Palo Alto, it will try to renew and load the new certificate
        echo "Certificate for $FQDN not found! generating new certificate!"
        GenCerts
        UploadCerts
    fi
else
    echo "API Error: $PACERT"
fi